name: Build and Release

on:
  workflow_dispatch:
  release:
    types: [ released,prereleased ]


jobs:
  build:
    permissions:
      contents: write
    strategy:
      matrix:
        goos: [ windows,  linux, darwin ]
        goarch: [ amd64, arm64 ]
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
    steps:
      - name: Get version
        id: get_version
        run: |
          echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "${GITHUB_REF}"
      - name: Checkout
        uses: actions/checkout@v4.0.0
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.8.1
      - name: Install Dependencies
        run: npm install --global yarn
      - name: Setup Go environment
        uses: actions/setup-go@v4.1.0
        with:
          go-version: '1.22'
          check-latest: true
      - name: Gen output name
        run: |
          echo "FILENAME=pmail_${{ matrix.goos }}_${{ matrix.goarch }}" >> ${GITHUB_ENV}
          echo "TGFILENAME=telegram_push_${{ matrix.goos }}_${{ matrix.goarch }}" >> ${GITHUB_ENV}
          echo "WCFILENAME=wechat_push_${{ matrix.goos }}_${{ matrix.goarch }}" >> ${GITHUB_ENV}
          echo "SPAMBLOCKFILENAME=spam_block_${{ matrix.goos }}_${{ matrix.goarch }}" >> ${GITHUB_ENV}
          echo "ZIPNAME=${{ matrix.goos }}_${{ matrix.goarch }}" >> ${GITHUB_ENV}
      - name: Rename Windows File
        if: matrix.goos == 'windows'
        run: |
          echo "FILENAME=pmail_${{ matrix.goos }}_${{ matrix.goarch }}.exe" >> ${GITHUB_ENV}
          echo "TGFILENAME=telegram_push_${{ matrix.goos }}_${{ matrix.goarch }}.exe" >> ${GITHUB_ENV}
          echo "WCFILENAME=wechat_push_${{ matrix.goos }}_${{ matrix.goarch }}.exe" >> ${GITHUB_ENV}
          echo "SPAMBLOCKFILENAME=spam_block_${{ matrix.goos }}_${{ matrix.goarch }}.exe" >> ${GITHUB_ENV}
      - name: FE Build
        run: cd fe && yarn && yarn build
      - name: BE Build
        run: |
          cd server && cp -rf ../fe/dist listen/http_server
          go build -ldflags "-s -w -X 'main.version=${{ env.VERSION }}' -X 'main.goVersion=$(go version)' -X 'main.gitHash=$(git show -s --format=%H)' -X 'main.buildTime=$(TZ=UTC-8 date +%Y-%m-%d" "%H:%M:%S)'" -o ${{ env.FILENAME }}  main.go
          go build -ldflags "-s -w" -o ${{ env.TGFILENAME }} hooks/telegram_push/telegram_push.go 
          go build -ldflags "-s -w" -o ${{ env.WCFILENAME }} hooks/wechat_push/wechat_push.go
          go build -ldflags "-s -w" -o ${{ env.SPAMBLOCKFILENAME }} hooks/spam_block/spam_block.go
          ls -alh
      - name: Zip
        run: |
          cd ./server
          mkdir plugins
          mv ${{ env.TGFILENAME }} plugins/
          mv ${{ env.WCFILENAME }} plugins/
          mv ${{ env.SPAMBLOCKFILENAME }} plugins/
          zip -r ${{ env.ZIPNAME }}.zip ${{ env.FILENAME }} plugins
          ls
      - name: Upload files to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ZIPNAME }}
          path: server/${{ env.ZIPNAME }}.zip
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: server/${{ env.ZIPNAME }}.zip
          tag: ${{ github.ref }}
          file_glob: true
